+
+
+
###############################################################################
                    封包内文件的外部资源协同加载问题
###############################################################################

（一）一些问题的提前引出（2013-01-28）

    以前在写 GameViewer 的时候，有三个问题很难处理。第一个是磁盘文件名乱码的问
题，这个问题通过人工指定编码，现在已经解决了；第二个是封包内嵌套封包的问题，通
过对包内文件放到临时目录里再次尝试加载，并引进封包挂载到哈希表节点的方式，其正
好形成了一个可递归的执行过程，解决了封包嵌套的问题，而且支持无限嵌套；第三个也
是最难处理的问题，那就是文件资源的相互引用问题。
    举个例子，英雄传说6里的人物行走图，其图片数据是切成一块块的，实际使用的时
候，需要一个外部的索引文件来拼接这些图块，形成最终的图片。GameViewer 那时候由
于程序架构的先天不足，只能是在读取图片文件的时候把索引文件也作为数据附加到图片
数据的后面。那样是不纯净的做法，这一层是不应该在解包插件里做的，解包插件应该只
提供单个文件的读取功能，而且如果索引文件不在同一个封包里就无法实现了。后来做3D
模型渲染的时候就碰到了这个问题。贴图图片是在别的封包里的，必须先解到磁盘上才能
读取使用。
    目前，这个问题是没有一个通用的解法的。每个游戏，不同的引擎不同的实现，文件
资源的组织引用都不相同。解决这个问题其实就是在做这个游戏引擎的相关实现。这次一
定要解决这个问题，并且要实现使用一套最终二进制，既能在那个多进程集成环境里直接
浏览目标文件数据，脱离了那个多进程环境也能直接拿来使用在自己定制的程序里面。

（二）一些初步的设想（2013-08-15）

    引用外部数据文件，取数据这一步是必须要有的，所以一个取数据的接口模块是大家
共有的。定制这么一个中间层，可以不改上层实现是从 QstMount 里取，还是脱离了那个
多进程环境直接从文件里取。当然脱离环境下的那个接口模块要根据不同的游戏定制，但
是要保证接口函数形式上的一致，这才能实现无缝切换。
    接下来是要处理各种文件的引用关系了。目前想到的是使用一个硬编码的接口模块来
管理各种文件的引用关系。它建立在那个取数据的抽象层之上，不同的游戏需要定制不同
的模块。调用者发起目标文件加载->关系模块解码文件并确定需要哪些外部文件->向取数
据模块发出文件加载调用。
    也许那个关系模块要再做的大一点，直接实现实际游戏的一部分渲染功能？那就不用
加载目标文件了，提供好各种接口，可以让外部脚本来发起一组场景的加载与渲染了。但
是这样做的话又会和具体的3D API搞在一起。

（三）两种情况的区别（2013-08-19）

    一种是必须要用外部文件才能生成一种内容结果，即内容是直接相关的；一种是需要
外部文件才能得到最终的显示结果，即内容之间没有直接相关，只是在显示的时候需要共
同作用。这两者是两种完全不一样的情况，需要分开对待。

（四）外部加载最后的做法（2013-09-05）

    将所有的封包的子文件注册到一个统一的查找表里即可解决绝大部分外部文件查找加
载的问题，这样做可以省掉资源路由这一层。但是如果不同封包里面有相同文件名的时候
就会发生冲突。所以，为了保证应对所有情况，资源路由这一层还是保留。提供一个透传
的路由模块来应对绝大多数情况。如果遇到特殊情况就使用特殊定制的路由模块。

###############################################################################
###############################################################################
###############################################################################
+
+
+