
（一）一些问题的提前引出（2013-01-28）

    以前在写 GameViewer 的时候，有三个问题很难处理。第一个是磁盘文件名乱码的问
题，这个问题通过人工指定编码，现在已经解决了；第二个是封包内嵌套封包的问题，通
过对包内文件放到临时目录里再次尝试加载，并引进封包挂载到哈希表节点的方式，其正
好形成了一个可递归的执行过程，解决了封包嵌套的问题，而且支持无限嵌套；第三个也
是最难处理的问题，那就是文件资源的相互引用问题。
    举个例子，英雄传说6里的人物行走图，其图片数据是切成一块块的，实际使用的时
候，需要一个外部的索引文件来拼接这些图块，形成最终的图片。GameViewer 那时候由
于程序架构的先天不足，只能是在读取图片文件的时候把索引文件也作为数据附加到图片
数据的后面。那样是不纯净的做法，这一层是不应该在解包插件里做的，解包插件应该只
提供单个文件的读取功能，而且如果索引文件不在同一个封包里就无法实现了。后来做3D
模型渲染的时候就碰到了这个问题。贴图图片是在别的封包里的，必须先解到磁盘上才能
读取使用。
    目前，这个问题是没有一个通用的解法的。每个游戏，不同的引擎不同的实现，文件
资源的组织引用都不相同。解决这个问题其实就是在做这个游戏引擎的相关实现。这次一
定要解决这个问题，并且要实现使用一套最终二进制，既能在那个多进程集成环境里直接
浏览目标文件数据，脱离了那个多进程环境也能直接拿来使用在自己定制的程序里面。
